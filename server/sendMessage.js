// Usage:
//   1) npm install node-fetch uuid
//   2) For sending a message:
//         node sendMessage.js "Hello from Node" "myUserId123" "default"
//      For updating/creating a channel:
//         node sendMessage.js update-channel "channelId123" "Channel Description"
//         node sendMessage.js update-channel "channelId123" "Channel Description" "Yes"   // deletes if delete flag is "Yes"
//      For adding a channel admin:
//         node sendMessage.js add-channel-admin "channelId123" "userId123"
//         node sendMessage.js add-channel-admin "channelId123" "user@example.com"
//         node sendMessage.js add-channel-admin "channelId123" "user@example.com" "Yes"    // deletes if delete flag is "Yes"
//
// This script will POST a GiftedChat-format message or update the database via the API server at the appropriate endpoints.
// The message _id is generated via uuid (currently commented out, assuming the server generates it).
//
const fetch = require('node-fetch');
const { v4: uuidv4 } = require('uuid');

// API server base URL
const BASE_URL = 'http://b200.tagfans.com:5300';

// Function to post a chat message to /api/send-message.
async function postMessage(textMsg, uid, channelId = 'default') {
  // Construct the message object in GiftedChat format
  let messageObj = {
    text: textMsg,
    user: { _id: uid },
    channelId: channelId,
    // createdAt and _id can be generated by the server if omitted.
    // createdAt: new Date().toISOString(),
    // _id: uuidv4(),
  };

  try {
    const response = await fetch(`${BASE_URL}/api/send-message`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ message: messageObj }),
    });

    if (!response.ok) {
      throw new Error(`Server responded with status ${response.status}`);
    }

    const data = await response.json();
    console.log('Message sent successfully:', data);
  } catch (error) {
    console.error('Error sending message:', error.message);
  }
}

// Function to post an update or deletion of a channel via /api/update-channel.
async function postUpdateChannel(channelId, channelDescription, deleteChannel) {
  const payload = { channelId, channelDescription, deleteChannel };
  try {
    const response = await fetch(`${BASE_URL}/api/update-channel`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(payload),
    });
    if (!response.ok) {
      throw new Error(`Server responded with status ${response.status}`);
    }
    const data = await response.json();
    console.log('update-channel successful:', data);
  } catch (error) {
    console.error('Error in update-channel:', error.message);
  }
}

// Function to post an admin channel addition or removal via /api/add-channel-admin.
async function postAddChannelAdmin(channelId, userIdentifier, deleteAdmin) {
  // Determine if userIdentifier is an email (contains '@') or a userId.
  let payload = { channelId };
  if (userIdentifier.includes('@')) {
    payload.email = userIdentifier;
  } else {
    payload.userId = userIdentifier;
  }
  if (deleteAdmin) {
    payload.deleteAdmin = deleteAdmin;
  }
  try {
    const response = await fetch(`${BASE_URL}/api/add-channel-admin`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(payload),
    });
    if (!response.ok) {
      throw new Error(`Server responded with status ${response.status}`);
    }
    const data = await response.json();
    console.log('add-channel-admin successful:', data);
  } catch (error) {
    console.error('Error in add-channel-admin:', error.message);
  }
}

// Command-line parsing
const args = process.argv.slice(2);
if (args.length === 0) {
  console.error('Error: No arguments provided.');
  process.exit(1);
}

const command = args[0];

switch (command) {
  case 'update-channel': {
    // Expected: update-channel <channelId> <channelDescription> [deleteChannel]
    if (args.length < 3) {
      console.error('Usage: node sendMessage.js update-channel <channelId> <channelDescription> [deleteChannel: Yes]');
      process.exit(1);
    }
    const updChannelId = args[1];
    const updChannelDescription = args[2];
    const deleteChannel = args[3] || "";
    postUpdateChannel(updChannelId, updChannelDescription, deleteChannel);
    break;
  }
  case 'add-channel-admin': {
    // Expected: add-channel-admin <channelId> <userIdOrEmail> [deleteAdmin: Yes]
    if (args.length < 3) {
      console.error('Usage: node sendMessage.js add-channel-admin <channelId> <userIdOrEmail> [deleteAdmin: Yes]');
      process.exit(1);
    }
    const adminChannelId = args[1];
    const userIdentifier = args[2];
    const deleteAdmin = args[3] || "";
    postAddChannelAdmin(adminChannelId, userIdentifier, deleteAdmin);
    break;
  }
  default:
    // Default: assume send-message
    // Usage: node sendMessage.js "text" [userId] [channelId]
    const text = args[0];
    let userId = args[1] || 'system';
    let channelId = args[2] || 'default';
    // If userId wasn't provided, generate a random one (this line is mostly redundant given the default above).
    if (!userId) {
      userId = Math.random().toString(36).substring(7);
    }
    postMessage(text, userId, channelId);
    break;
}
