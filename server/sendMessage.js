// Usage:
//   1) npm install node-fetch uuid
//
//   # Sending a message:
//     node sendMessage.js "Hello from Node" "myUserId123" "default"
//
//   # Updating or deleting a channel:
//     node sendMessage.js update-channel "channelId123" "Channel Description"
//     node sendMessage.js update-channel "channelId123" "Channel Description" "Yes"   // deletes if delete flag is "Yes"
//
//   # Adding or removing a channel admin:
//     node sendMessage.js add-channel-admin "channelId123" "userId123"
//     node sendMessage.js add-channel-admin "channelId123" "user@example.com"
//     node sendMessage.js add-channel-admin "channelId123" "user@example.com" "Yes"    // deletes if delete flag is "Yes"
//
//   # Register a new user (email only):
//     node sendMessage.js register "user@example.com"
//
//   # Verify email and set password:
//     node sendMessage.js verify-email "<tokenFromEmail>" "<newPassword>"
//
//   # Login:
//     node sendMessage.js login "user@example.com" "<password>"
//
//   # Forgot password (send email with token):
//     node sendMessage.js forgot-password "user@example.com"
//
//   # Reset password (using token from email):
//     node sendMessage.js reset-password "<tokenFromEmail>" "<newPassword>"
//
//   # List channels that a user is admin of (by userId or email):
//     node sendMessage.js list-admin "user@example.com"
//     or
//     node sendMessage.js list-admin "someUserId123"
//
//////////////////////////////////////

const fetch = require('node-fetch');
const { v4: uuidv4 } = require('uuid');

// API server base URL
const BASE_URL = 'http://b200.tagfans.com:5300';

// -------------------
// Existing functions
// -------------------

// Function to post a chat message to /api/send-message.
async function postMessage(textMsg, uid, channelId = 'default') {
  // Construct the message object in GiftedChat format
  let messageObj = {
    text: textMsg,
    user: { _id: uid },
    channelId: channelId,
    // createdAt and _id can be generated by the server if omitted.
    // createdAt: new Date().toISOString(),
    // _id: uuidv4(),
  };

  try {
    const response = await fetch(`${BASE_URL}/api/send-message`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ message: messageObj }),
    });

    if (!response.ok) {
      throw new Error(`Server responded with status ${response.status}`);
    }

    const data = await response.json();
    console.log('Message sent successfully:', data);
  } catch (error) {
    console.error('Error sending message:', error.message);
  }
}

// Function to post an update or deletion of a channel via /api/update-channel.
async function postUpdateChannel(channelId, channelDescription, deleteChannel) {
  const payload = { channelId, channelDescription, deleteChannel };
  try {
    const response = await fetch(`${BASE_URL}/api/update-channel`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(payload),
    });
    if (!response.ok) {
      throw new Error(`Server responded with status ${response.status}`);
    }
    const data = await response.json();
    console.log('update-channel successful:', data);
  } catch (error) {
    console.error('Error in update-channel:', error.message);
  }
}

// Function to post an admin channel addition or removal via /api/add-channel-admin.
async function postAddChannelAdmin(channelId, userIdentifier, deleteAdmin) {
  // Determine if userIdentifier is an email (contains '@') or a userId.
  let payload = { channelId };
  if (userIdentifier.includes('@')) {
    payload.email = userIdentifier;
  } else {
    payload.userId = userIdentifier;
  }
  if (deleteAdmin) {
    payload.deleteAdmin = deleteAdmin;
  }
  try {
    const response = await fetch(`${BASE_URL}/api/add-channel-admin`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(payload),
    });
    if (!response.ok) {
      throw new Error(`Server responded with status ${response.status}`);
    }
    const data = await response.json();
    console.log('add-channel-admin successful:', data);
  } catch (error) {
    console.error('Error in add-channel-admin:', error.message);
  }
}

// ----------------------------------------
// New functions for user & channel actions
// ----------------------------------------

// Function to register a new user (by email) via /api/register.
async function postRegister(email) {
  try {
    const response = await fetch(`${BASE_URL}/api/register`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ email }),
    });

    if (!response.ok) {
      throw new Error(`Server responded with status ${response.status}`);
    }

    const data = await response.json();
    console.log('User registration result:', data);
  } catch (error) {
    console.error('Error in register:', error.message);
  }
}

// Function to verify email & set password via /api/verify-email.
async function postVerifyEmail(token, password) {
  try {
    const response = await fetch(`${BASE_URL}/api/verify-email`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ token, password }),
    });

    if (!response.ok) {
      throw new Error(`Server responded with status ${response.status}`);
    }

    const data = await response.json();
    console.log('Email verification result:', data);
  } catch (error) {
    console.error('Error in verify-email:', error.message);
  }
}

// Function to login via /api/login.
async function postLogin(email, password) {
  try {
    const response = await fetch(`${BASE_URL}/api/login`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ email, password }),
    });

    if (!response.ok) {
      throw new Error(`Server responded with status ${response.status}`);
    }

    const data = await response.json();
    console.log('Login successful. Received token:', data.token);
    console.log('User ID:', data.userId);
  } catch (error) {
    console.error('Error in login:', error.message);
  }
}

// Function to send a forgot-password email via /api/forgot-password.
async function postForgotPassword(email) {
  try {
    const response = await fetch(`${BASE_URL}/api/forgot-password`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ email }),
    });

    if (!response.ok) {
      throw new Error(`Server responded with status ${response.status}`);
    }

    const data = await response.json();
    console.log('Forgot password result:', data);
  } catch (error) {
    console.error('Error in forgot-password:', error.message);
  }
}

// Function to reset password via /api/reset-password.
async function postResetPassword(token, newPassword) {
  try {
    const response = await fetch(`${BASE_URL}/api/reset-password`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ token, newPassword }),
    });

    if (!response.ok) {
      throw new Error(`Server responded with status ${response.status}`);
    }

    const data = await response.json();
    console.log('Reset password result:', data);
  } catch (error) {
    console.error('Error in reset-password:', error.message);
  }
}

// Function to list all channels that a user can admin via /api/list-admin.
async function postListAdmin(userIdOrEmail) {
  // Determine if userIdOrEmail is an email (contains '@') or a userId
  let payload = {};
  if (userIdOrEmail.includes('@')) {
    payload.email = userIdOrEmail;
  } else {
    payload.userId = userIdOrEmail;
  }

  try {
    const response = await fetch(`${BASE_URL}/api/list-admin`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(payload),
    });

    if (!response.ok) {
      throw new Error(`Server responded with status ${response.status}`);
    }

    const data = await response.json();
    console.log('list-admin result:', data);
  } catch (error) {
    console.error('Error in list-admin:', error.message);
  }
}

// ------------------------------------------------
// Command-line argument parsing and usage handling
// ------------------------------------------------

function printUsageAndExit() {
  console.log(`
Usage:
  # Send a message:
    node sendMessage.js "Hello from Node" [userId] [channelId]

  # Update or delete a channel:
    node sendMessage.js update-channel <channelId> <channelDescription> [deleteChannel: Yes]

  # Add or remove a channel admin:
    node sendMessage.js add-channel-admin <channelId> <userIdOrEmail> [deleteAdmin: Yes]

  # Register a new user (email only):
    node sendMessage.js register <email>

  # Verify email and set password:
    node sendMessage.js verify-email <token> <password>

  # Login:
    node sendMessage.js login <email> <password>

  # Forgot password (send email with token):
    node sendMessage.js forgot-password <email>

  # Reset password (using token from email):
    node sendMessage.js reset-password <token> <newPassword>

  # List channels that a user is admin of (by userId or email):
    node sendMessage.js list-admin <userIdOrEmail>
`);
  process.exit(1);
}

const args = process.argv.slice(2);
if (args.length === 0 || args[0] === 'help') {
  printUsageAndExit();
}

const command = args[0];

switch (command) {
  case 'update-channel': {
    // Expected: update-channel <channelId> <channelDescription> [deleteChannel: Yes]
    if (args.length < 3) {
      console.error('Error: Missing arguments for update-channel.');
      printUsageAndExit();
    }
    const updChannelId = args[1];
    const updChannelDescription = args[2];
    const deleteChannel = args[3] || "";
    postUpdateChannel(updChannelId, updChannelDescription, deleteChannel);
    break;
  }

  case 'add-channel-admin': {
    // Expected: add-channel-admin <channelId> <userIdOrEmail> [deleteAdmin: Yes]
    if (args.length < 3) {
      console.error('Error: Missing arguments for add-channel-admin.');
      printUsageAndExit();
    }
    const adminChannelId = args[1];
    const userIdentifier = args[2];
    const deleteAdmin = args[3] || "";
    postAddChannelAdmin(adminChannelId, userIdentifier, deleteAdmin);
    break;
  }

  case 'register': {
    // Usage: node sendMessage.js register <email>
    if (args.length < 2) {
      console.error('Error: Missing email for register.');
      printUsageAndExit();
    }
    const email = args[1];
    postRegister(email);
    break;
  }

  case 'verify-email': {
    // Usage: node sendMessage.js verify-email <token> <password>
    if (args.length < 3) {
      console.error('Error: Missing token or password for verify-email.');
      printUsageAndExit();
    }
    const token = args[1];
    const password = args[2];
    postVerifyEmail(token, password);
    break;
  }

  case 'login': {
    // Usage: node sendMessage.js login <email> <password>
    if (args.length < 3) {
      console.error('Error: Missing email or password for login.');
      printUsageAndExit();
    }
    const email = args[1];
    const password = args[2];
    postLogin(email, password);
    break;
  }

  case 'forgot-password': {
    // Usage: node sendMessage.js forgot-password <email>
    if (args.length < 2) {
      console.error('Error: Missing email for forgot-password.');
      printUsageAndExit();
    }
    const email = args[1];
    postForgotPassword(email);
    break;
  }

  case 'reset-password': {
    // Usage: node sendMessage.js reset-password <token> <newPassword>
    if (args.length < 3) {
      console.error('Error: Missing token or newPassword for reset-password.');
      printUsageAndExit();
    }
    const token = args[1];
    const newPassword = args[2];
    postResetPassword(token, newPassword);
    break;
  }

  case 'list-admin': {
    // Usage: node sendMessage.js list-admin <userIdOrEmail>
    if (args.length < 2) {
      console.error('Error: Missing userIdOrEmail for list-admin.');
      printUsageAndExit();
    }
    const userIdOrEmail = args[1];
    postListAdmin(userIdOrEmail);
    break;
  }

  default:
    // Default: assume send-message
    // Usage: node sendMessage.js "text" [userId] [channelId]
    const text = args[0];
    let userId = args[1] || 'system';
    let channelId = args[2] || 'default';
    // If userId wasn't provided, generate a random one (this line is mostly redundant given the default above).
    if (!userId) {
      userId = Math.random().toString(36).substring(7);
    }
    postMessage(text, userId, channelId);
    break;
}
